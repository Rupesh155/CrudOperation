{"version":3,"sources":["components/Heading.js","context/AppReducer.js","context/GlobalState.js","components/UserList.js","components/Home.js","components/AddUser.js","components/EditUser.js","App.js","serviceWorker.js","index.js"],"names":["Heading","Navbar","color","dark","Container","NavbarBrand","href","Nav","NavItem","className","to","state","action","type","users","filter","user","id","payload","console","log","updateUser","updateUsers","map","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","removeUser","addUser","editUser","UserList","useContext","scope","length","index","key","firstName","lastName","designation","contactNo","Button","onClick","Home","AddUser","useState","data","setData","history","useHistory","onChange","e","target","name","Form","onSubmit","preventDefault","newUser","uuid","push","style","maxWidth","margin","FormGroup","Label","Input","placeholder","required","EditUser","props","selectedUser","setSelectedUser","currentUserId","match","params","useEffect","userId","find","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uQAUaA,EAAU,WACrB,OACE,kBAACC,EAAA,EAAD,CAAQC,MAAM,OAAOC,MAAI,GACvB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAaC,KAAK,KAAlB,wBACA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMC,UAAU,kBAAkBC,GAAG,QAArC,Y,uBCjBG,WAACC,EAAOC,GACrB,OAAQA,EAAOC,MACb,IAAK,cACH,OAAO,2BACFF,GADL,IAEEG,MAAOH,EAAMG,MAAMC,QAAO,SAAAC,GACxB,OAAOA,EAAKC,KAAOL,EAAOM,aAGhC,IAAK,WAGH,OADAC,QAAQC,IAAIR,EAAOM,QAASP,EAAO,kBAC5B,2BAAYA,GAAnB,IACEG,MAAM,CAAEF,EAAOM,SAAV,mBAAsBP,EAAMG,UAGrC,IAAK,YACH,IAAMO,EAAaT,EAAOM,QAEpBI,EAAcX,EAAMG,MAAMS,KAAI,SAAAP,GAClC,OAAIA,EAAKC,KAAOI,EAAWJ,GAClBI,EAEFL,KAET,OAAO,2BACFL,GADL,IAEEG,MAAOQ,IAGX,QACE,OAAOX,IC3BPa,EAAe,CACnBV,MAAO,IAIIW,EAAgBC,wBAAcF,GAG9BG,EAAiB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACpBC,qBAAWC,EAAYN,GADH,mBACvCb,EADuC,KAChCoB,EADgC,KA0B9C,OACE,kBAACN,EAAcO,SAAf,CAAwBC,MAAO,CAC7BnB,MAAOH,EAAMG,MACboB,WAzBe,SAACjB,GAClBc,EAAS,CACPlB,KAAM,cACNK,QAASD,KAuBTkB,QAnBY,SAACnB,GACfG,QAAQC,IAAIJ,EAAK,oBACjBe,EAAS,CACPlB,KAAM,WACNK,QAASF,KAgBToB,SAZa,SAACpB,GAChBe,EAAS,CACPlB,KAAM,YACNK,QAASF,OAWRY,I,QCpCMS,EAAW,WAAO,IAAD,EACEC,qBAAWb,GAAjCX,EADoB,EACpBA,MAAOoB,EADa,EACbA,WAMf,OALAf,QAAQC,IAAIN,EAAO,oBAMjB,oCACE,2BAAOL,UAAU,SACf,+BACE,4BACE,wBAAI8B,MAAM,OAAV,KACA,wBAAIA,MAAM,OAAV,cACA,wBAAIA,MAAM,OAAV,aACA,wBAAIA,MAAM,OAAV,gBACA,wBAAIA,MAAM,OAAV,oBAGJ,+BACGzB,EAAM0B,OAAS,EACd,oCACG1B,EAAMS,KAAI,SAACP,EAAMyB,GAAP,OAGT,wBAAIC,IAAK1B,EAAKC,IAEZ,4BAAKwB,EAAQ,EACVtB,QAAQC,IAAIJ,EAAK2B,UAAW,mBAE/B,4BAAK3B,EAAK2B,WACV,4BAAK3B,EAAK4B,UACV,4BAAK5B,EAAK6B,aACV,4BAAK7B,EAAK8B,WACV,yBAAKrC,UAAU,WACb,kBAAC,IAAD,CAAMC,GAAE,gBAAWM,EAAKC,IAAMf,MAAM,UAAUO,UAAU,uBAAxD,QACA,kBAACsC,EAAA,EAAD,CAAQC,QAAS,kBAAMd,EAAWlB,EAAKC,KAAKf,MAAM,UAAlD,gBAMR,wBAAIO,UAAU,eAAd,yBC/CCwC,EAAO,WAClB,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,gDCOOC,EAAU,WAAO,IAAD,EACHC,mBAAS,CAC/BR,UAAW,GACXC,SAAU,GACVC,YAAa,GACbC,UAAW,KALc,mBACpBM,EADoB,KACdC,EADc,OAOHF,oBAAS,GAPN,6BAQ3BhC,QAAQC,IAAIgC,EAAM,WARS,IASnBjB,EAAYG,qBAAWb,GAAvBU,QACFmB,EAAUC,cAcVC,EAAW,SAACC,GAChBJ,EAAQ,2BAAKD,GAAN,kBAAaK,EAAEC,OAAOC,KAAOF,EAAEC,OAAOzB,UAM/C,OACE,kBAAC2B,EAAA,EAAD,CAAMC,SAlBS,SAACJ,GAChBA,EAAEK,iBACF,IAAMC,EAAO,aACX9C,GAAI+C,eACDZ,GAELjB,EAAQ4B,GACRT,EAAQW,KAAK,MAWaC,MAAO,CAAEC,SAAU,QAASC,OAAQ,cAC5D,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,aACA,kBAACC,EAAA,EAAD,CAAO1D,KAAK,OAAOoB,MAAOmB,EAAKT,UAAWa,SAAUA,EAAUG,KAAK,YAAYa,YAAY,YAAYC,UAAQ,IAC/G,kBAACH,EAAA,EAAD,mBACA,kBAACC,EAAA,EAAD,CAAO1D,KAAK,OAAOoB,MAAOmB,EAAKR,SAAUY,SAAUA,EAAUG,KAAK,WAAWa,YAAY,WAAWC,UAAQ,IAC5G,kBAACH,EAAA,EAAD,qBAEA,kBAACC,EAAA,EAAD,CAAO1D,KAAK,OAAOoB,MAAOmB,EAAKP,YAAaW,SAAUA,EAAUG,KAAK,cAAca,YAAY,cAAcC,UAAQ,IACrH,kBAACH,EAAA,EAAD,wBAEA,kBAACC,EAAA,EAAD,CAAO1D,KAAK,SAASoB,MAAOmB,EAAKN,UAAaU,SAAUA,EAAUG,KAAK,YAAYa,YAAY,aAAaC,UAAQ,KAEtH,kBAAC1B,EAAA,EAAD,CAAQlC,KAAK,UAAb,UACA,kBAAC,IAAD,CAAMH,GAAG,IAAID,UAAU,uBAAvB,YClDOiE,EAAW,SAACC,GAAW,IAAD,EACLrC,qBAAWb,GAA/BW,EADyB,EACzBA,SAAUtB,EADe,EACfA,MADe,EAEOqC,mBAAS,CAC/ClC,GAAI,GACJ0B,UAAU,GACVC,SAAS,GACTC,YAAY,GACZC,UAAU,KAPqB,mBAE1B8B,EAF0B,KAEZC,EAFY,KAS3BvB,EAAUC,cACVuB,EAAgBH,EAAMI,MAAMC,OAAO/D,GAVR,EAWiB2D,GAAe,GAAzDjC,EAXyB,EAWzBA,UAAUC,EAXe,EAWfA,SAASC,EAXM,EAWNA,YAAYC,EAXN,EAWMA,UAEvCmC,qBAAU,WACR,IAAMC,EAASJ,EACTF,EAAe9D,EAAMqE,MAAK,SAAAnE,GAAI,OAAIA,EAAKC,KAAOiE,KACpDL,EAAgBD,KACf,CAACE,EAAehE,IAEnB,IAAM0C,EAAW,SAACC,GAChBoB,EAAgB,2BAAKD,GAAN,kBAAqBnB,EAAEC,OAAOC,KAAOF,EAAEC,OAAOzB,UAS/D,OACE,kBAAC2B,EAAA,EAAD,CAAMC,SAPS,SAACJ,GAChBA,EAAEK,iBACF1B,EAASwC,GACTtB,EAAQW,KAAK,MAIeC,MAAO,CAAEC,SAAU,QAASC,OAAQ,cAC9D,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,aACA,kBAACC,EAAA,EAAD,CAAO1D,KAAK,OAAOoB,MAAOU,EAAWa,SAAUA,EAAUG,KAAK,YAAYa,YAAY,YAAYC,UAAQ,IAC1G,kBAACF,EAAA,EAAD,CAAO1D,KAAK,OAAOoB,MAAOW,EAAUY,SAAUA,EAAUG,KAAK,WAAWa,YAAY,WAAWC,UAAQ,IACvG,kBAACF,EAAA,EAAD,CAAO1D,KAAK,OAAOoB,MAAOY,EAAaW,SAAUA,EAAUG,KAAK,cAAca,YAAY,cAAcC,UAAQ,IAChH,kBAACF,EAAA,EAAD,CAAO1D,KAAK,OAAOoB,MAAOa,EAAWU,SAAUA,EAAUG,KAAK,YAAYa,YAAY,aAAaC,UAAQ,KAI7G,kBAAC1B,EAAA,EAAD,CAAQlC,KAAK,UAAb,UACA,kBAAC,IAAD,CAAMH,GAAG,IAAID,UAAU,uBAAvB,YC1BS2E,G,MAjBH,WACV,OACE,6BACE,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWtC,IACjC,kBAAC,IAAD,CAAOqC,KAAK,OAAOC,UAAWrC,IAC9B,kBAAC,IAAD,CAAOoC,KAAK,YAAYC,UAAWb,UCN3Bc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASZ,MACvB,2DCbNa,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrF,QAAQqF,MAAMA,EAAMC,c","file":"static/js/main.d6e68542.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Navbar,\r\n  Nav,\r\n  NavItem,\r\n  NavbarBrand,\r\n  Container\r\n} from \"reactstrap\";\r\n\r\nexport const Heading = () => {\r\n  return (\r\n    <Navbar color=\"dark\" dark>\r\n      <Container>\r\n        <NavbarBrand href=\"/\">Employee Information</NavbarBrand>\r\n        <Nav>\r\n          <NavItem>\r\n            <Link className=\"btn btn-primary\" to=\"/add\">Add</Link>\r\n          </NavItem>\r\n        </Nav>\r\n\r\n      </Container>\r\n    </Navbar>\r\n  )\r\n}\r\n","export default (state, action) => {\r\n  switch (action.type) {\r\n    case 'REMOVE_USER':\r\n      return {\r\n        ...state,\r\n        users: state.users.filter(user => {\r\n          return user.id !== action.payload;\r\n        })\r\n      }\r\n    case 'ADD_USER':\r\n      // state = action.payload;\r\n      console.log(action.payload, state, ' hellllooooooo');\r\n      return {        ...state,\r\n        users: [action.payload, ...state.users]\r\n\r\n      };\r\n    case 'EDIT_USER':\r\n      const updateUser = action.payload;\r\n\r\n      const updateUsers = state.users.map(user => {\r\n        if (user.id === updateUser.id) {\r\n          return updateUser;\r\n        }\r\n        return user;\r\n      })\r\n      return {\r\n        ...state,\r\n        users: updateUsers\r\n      }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}","import React, { createContext, useReducer } from 'react';\r\nimport AppReducer from './AppReducer';\r\n\r\n// Initial State\r\nconst initialState = {\r\n  users: []\r\n}\r\n\r\n// Create Context\r\nexport const GlobalContext = createContext(initialState);\r\n\r\n// Provider Component\r\nexport const GlobalProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(AppReducer, initialState);\r\n\r\n  // Actions\r\n  const removeUser = (id) => {\r\n    dispatch({\r\n      type: 'REMOVE_USER',\r\n      payload: id\r\n    })\r\n  }\r\n\r\n  const addUser = (user) => {\r\n    console.log(user,\"userfrom context\")\r\n    dispatch({\r\n      type: 'ADD_USER',\r\n      payload: user\r\n    })\r\n  }\r\n\r\n  const editUser = (user) => {\r\n    dispatch({\r\n      type: 'EDIT_USER',\r\n      payload: user\r\n    })\r\n  }\r\n\r\n  return (\r\n    <GlobalContext.Provider value={{\r\n      users: state.users,\r\n      removeUser,\r\n      addUser,\r\n      editUser\r\n    }}>\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  )\r\n}","import React, { useContext } from 'react';\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  ListGroup,\r\n  ListGroupItem,\r\n  Button\r\n} from \"reactstrap\";\r\n\r\nexport const UserList = () => {\r\n  const { users, removeUser } = useContext(GlobalContext);\r\n  console.log(users, \"RRRRRRRRRRRRRRRR\")\r\n\r\n  // const {firstName,data}=users\r\n  // console.log(users !== undefined ? users.data.data : {}, \"firstName\")\r\n\r\n  return (\r\n    <>\r\n      <table className=\"table\">\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">#</th>\r\n            <th scope=\"col\">FIRST NAME</th>\r\n            <th scope=\"col\">LAST NAME</th>\r\n            <th scope=\"col\"> DESIGNATION</th>\r\n            <th scope=\"col\">CONTACT NUMBER</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {users.length > 0 ? (\r\n            <>\r\n              {users.map((user, index) => (\r\n\r\n\r\n                <tr key={user.id}>\r\n\r\n                  <th>{index + 1}\r\n                    {console.log(user.firstName, \"userrrrrrrrrrr\")}\r\n                  </th>\r\n                  <th>{user.firstName}</th>\r\n                  <th>{user.lastName}</th>\r\n                  <th>{user.designation}</th>\r\n                  <th>{user.contactNo}</th>\r\n                  <div className=\"ml-auto\">\r\n                    <Link to={`/edit/${user.id}`} color=\"warning\" className=\"btn btn-warning m-2\">Edit</Link>\r\n                    <Button onClick={() => removeUser(user.id)} color=\"danger\">remove</Button>\r\n                  </div>\r\n                </tr>\r\n              ))}\r\n            </>\r\n          ) : (\r\n            <h6 className='text-center' >No Employee Found</h6>\r\n          )}\r\n        </tbody>\r\n\r\n      </table>\r\n    </>\r\n  )\r\n}\r\n\r\n","import React from 'react';\r\nimport { Heading } from \"./Heading\";\r\nimport { UserList } from \"./UserList\";\r\n\r\nexport const Home = () => {\r\n  return (\r\n    <>\r\n      <Heading />\r\n      <UserList />\r\n    </>\r\n  )\r\n}\r\n","import React, { useState, useContext } from 'react';\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport {\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  Button\r\n} from \"reactstrap\";\r\n\r\n\r\n// const { register, handleSubmit, formState: { errors } } = useForm();\r\n\r\nexport const AddUser = () => {\r\n  const [data, setData] = useState({\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    designation: \"\",\r\n    contactNo: \"\"\r\n  });\r\n  const [valid ,setValid]=useState(false)\r\n  console.log(data, \"3434343\")\r\n  const { addUser } = useContext(GlobalContext);\r\n  const history = useHistory();\r\n\r\n\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const newUser = {\r\n      id: uuid(),\r\n      ...data\r\n    }\r\n    addUser(newUser);\r\n    history.push(\"/\");\r\n  }\r\n\r\n  const onChange = (e) => {\r\n    setData({ ...data, [e.target.name]: e.target.value });\r\n    \r\n  \r\n    \r\n  }\r\n\r\n  return (\r\n    <Form onSubmit={onSubmit} style={{ maxWidth: \"30rem\", margin: \"4rem auto\" }}>\r\n      <FormGroup  >\r\n        <Label>Name</Label>\r\n        <Input type=\"text\" value={data.firstName} onChange={onChange} name=\"firstName\" placeholder=\"FirstName\" required></Input>\r\n        <Label>Last Name*</Label>\r\n        <Input type=\"text\" value={data.lastName} onChange={onChange} name=\"lastName\" placeholder=\"LastName\" required></Input>\r\n        <Label>Designation*</Label>\r\n\r\n        <Input type=\"text\" value={data.designation} onChange={onChange} name=\"designation\" placeholder=\"designation\" required></Input>\r\n        <Label>Contact Number*</Label>\r\n      \r\n        <Input type=\"number\" value={data.contactNo}   onChange={onChange} name=\"contactNo\" placeholder=\"Contact No\" required></Input>\r\n      </FormGroup>\r\n      <Button type=\"submit\">Submit</Button>\r\n      <Link to=\"/\" className=\"btn btn-danger ml-2\">Cancel</Link>\r\n    </Form>\r\n  )\r\n}\r\n\r\n\r\n\r\n// import React, { useState, useContext } from 'react';\r\n// import { GlobalContext } from \"../context/GlobalState\";\r\n// import { v4 as uuid } from \"uuid\";\r\n// import { Link, useHistory } from \"react-router-dom\";\r\n// import {\r\n//   Form,\r\n//   FormGroup,\r\n//   Label,\r\n//   Input,\r\n//   Button\r\n// } from \"reactstrap\";\r\n\r\n// export const AddUser = () => {\r\n//   const [name, setName] = useState('');\r\n//   const { addUser } = useContext(GlobalContext);\r\n//   const history = useHistory();\r\n\r\n//   const onSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     const newUser = {\r\n//       id: uuid(),\r\n//       name\r\n//     }\r\n//     addUser(newUser);\r\n//     history.push(\"/\");\r\n//   }\r\n\r\n//   const onChange = (e) => {\r\n//     setName(e.target.value);\r\n//   }\r\n\r\n//   return (\r\n//     <Form onSubmit={onSubmit}>\r\n//       <FormGroup>\r\n//         <Label>Name</Label>\r\n//         <Input type=\"text\" value={name} onChange={onChange} name=\"name\" placeholder=\"Enter user\" required></Input>\r\n//       </FormGroup>\r\n//       <Button type=\"submit\">Submit</Button>\r\n//       <Link to=\"/\" className=\"btn btn-danger ml-2\">Cancel</Link>\r\n//     </Form>\r\n//   )\r\n// }\r\n","import React, { useState, useContext, useEffect } from 'react';\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport {\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  Button\r\n} from \"reactstrap\";\r\n\r\nexport const EditUser = (props) => {\r\n  const { editUser, users } = useContext(GlobalContext);\r\n  const [selectedUser, setSelectedUser] = useState({\r\n    id: \"\",\r\n    firstName:\"\",\r\n    lastName:\"\",\r\n    designation:\"\",\r\n    contactNo:\"\"\r\n  })\r\n  const history = useHistory();\r\n  const currentUserId = props.match.params.id;\r\n  const { firstName,lastName,designation,contactNo}=selectedUser|| {}\r\n\r\n  useEffect(() => {\r\n    const userId = currentUserId;\r\n    const selectedUser = users.find(user => user.id === userId);\r\n    setSelectedUser(selectedUser);\r\n  }, [currentUserId, users])\r\n\r\n  const onChange = (e) => {\r\n    setSelectedUser({ ...selectedUser, [e.target.name]: e.target.value })\r\n  }\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    editUser(selectedUser);\r\n    history.push(\"/\")\r\n  }\r\n\r\n  return (\r\n    <Form onSubmit={onSubmit}   style={{ maxWidth: \"30rem\", margin: \"4rem auto\" }}>\r\n      <FormGroup>\r\n        <Label>Name</Label>\r\n        <Input type=\"text\" value={firstName} onChange={onChange} name=\"firstName\" placeholder=\"firstName\" required></Input>\r\n        <Input type=\"text\" value={lastName} onChange={onChange} name=\"lastName\" placeholder=\"LastName\" required></Input>\r\n        <Input type=\"text\" value={designation} onChange={onChange} name=\"designation\" placeholder=\"designation\" required></Input>\r\n        <Input type=\"text\" value={contactNo} onChange={onChange} name=\"contactNo\" placeholder=\"contactNo.\" required></Input>\r\n        {/* <Input type=\"text\" value={name} onChange={onChange} name=\"name\" placeholder=\"Enter user\" required></Input> */}\r\n\r\n      </FormGroup>\r\n      <Button type=\"submit\">Update</Button>\r\n      <Link to=\"/\" className=\"btn btn-danger ml-2\">Cancel</Link>\r\n    </Form>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport { Home } from \"./components/Home\";\r\nimport { AddUser } from \"./components/AddUser\";\r\nimport { EditUser } from \"./components/EditUser\";\r\nimport { GlobalProvider } from \"./context/GlobalState\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div>\r\n      <GlobalProvider>\r\n        <Router>\r\n          <Switch>\r\n            {/* <Route exact path=\"/\" component={() => <Home users={users} setUsers={setUsers} />} /> */}\r\n            <Route exact path=\"/\" component={Home} />\r\n            <Route path=\"/add\" component={AddUser} />\r\n            <Route path=\"/edit/:id\" component={EditUser} />\r\n          </Switch>\r\n        </Router>\r\n      </GlobalProvider>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}